TOPICS:
-DESIGN Love calculator APP LANDING PAGE(At first we design wireframe)
-UNDERSTANDING A URL
-QUERY STRING DEEP DIVE
-USING GOOGLE CHROME DEVELOPER TOOL
-@RequestParam
-USING A DTO FOR DATA BINDING
-BEHIND THE SCENE WALKTHROUGH
-SPRING MVC FORM TAG
-TWO WAY DATA BINDING
-@ModelAttribute

------
Databinding is capturing data given by user.

------
1.DESIGN Love calculator APP LANDING PAGE(At first we design wireframe)

@RequestMapping("/") will return the page when url / is entered.
 public String showHomePage() {
        return "home-page";
    }

At first, we create controllers and view jsp page for taking name form and 
<form action="process-homepage" method="GET"> pass to another url from that view.

//2. Let's understand this URL:

http://localhost:8080/spring_love_calculator/process-homepage?userName=Milan+Lama&crushName=hero

- http is a protocol.
- We need to host a website inside a server,here we are hosting our website inside tomcat server, so it's localhost.
- If you're deploying your website inside a remote server than there will be IP Number instead of localhost.
- 8080: is a port number
- /spring_love_calculator/process-homepage : address to the web resources/project
- ?userName=Milan&crushName=hero : Generated by User input and all that information we will get as a query string. And, we need to capture that string.
- ? : identifier
- userName=Milan: Query parameters stored in key-value pair
- & : All Query parameters are connected by & symbol.
- + : will concact string where there's a space

//
  @RequestMapping("/process-homepage")
    public String showResultPage() {
        return "result-page";
    }

This controller will show our view page when /process-homepage url is entered.

//3. Using Developer Tool in Chrome

What kind of request are we getting, is it GET or POST request?
Using Network tool and seeing the url pattern

4. // Introducing @RequesParam

Capturing query parameter entered by user from previous form. This @RequestParam will help us bind the result parameter we're getting in url.
@RequestParam String userName,@RequestParam String crushName - Binding the queryparameter of form using this annotation.
userName and crushName should match with the input parameter name in FORM. 
If name is not matching with input parameter name then @RequestParam("userName") String userName. Use correct input name in bracket.

---- Binding url parameter with String variable

    @RequestMapping("/process-homepage")
    public String showResultPage(@RequestParam("userName") String userName1 ,@RequestParam("crushName") String crushName1) {

        System.out.println("Username is:" + userName1);
        System.out.println("Crushname is:" + crushName1);

        return "result-page";
    }


// Let's bring in Model: We'll send data from controller to the view.

Model model: model.addAttribute("userName",userName1);
model.addAttribute("crushName",crushName1);
 
//Capturing the queryparameter in view using ${}
<p>Your name is: ${userName}</p>
<p>Your Crush name is: ${crushName}</p>

-- Imagine you have very big form with 100 user input text box, so you'll need to write @RequestParam() and model.attribute also 100 times to bind these data.

Now, solution is to use A DTO for proper Spring binding.

CREATE A POJO/DTO. DATA TRANSFER OBJECT IS JUST A CLASS.

Spring will automatically bind the form data with the class variables in DTO class.

-- FORM:
User Name:
<input type="text" name="userName"><br>
Crush Name:
<input type="text" name="crushName"><br>

-- DTO CLASS:
class userInfoDto{
private String userName;
private String crushName;

// getters and setters

}

If you want spring to bind the data automatically, then the input form name and class variable name should be same. Otherwise, it won't bind.

Now, instead of @Request param, Create object of that DTO class and it'll bind the data.
UserInfoDTO userInfoDTO: We are writing this only in controller, But internally, At first spring will create object of this.

//
  @RequestMapping("/process-homepage")
    public String showResultPage(UserInfoDTO userInfoDTO, Model model){

	//Data binding and sending to view
        model.addAttribute("userInfo",userInfoDTO);

        return "result-page";
}


// In view: Spring will internally calls the getter methods.
<p>User Name is: ${userInfo.userName}</p>
<p>Crush Name is: ${userInfo.crushName}</p>


----

TWO WAY DATA BINDING: WE CAN READ AND WRITE TO A VARIABLE. READ USING GETTER AND WRITE USING SETTER

Binding means read and write the data.

// 5. @ModelAttribute- Modern way to bind the data

Should also see the default value stored in variable.

// Introducing SPRING MVC FORM TAGS, Let's use spring mvc form tags instead of html to build the form.
Spring mvc form tags will help us for two way data binding.

In html form add spring mvc form tag: <%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %> to activate tags

<form:form, form:input>

//
  @RequestMapping("/")
    public String showHomePage(Model model) {

        //read the default properties by fetching it from dto
        UserInfoDTO userInfoDTO = new UserInfoDTO();
        model.addAttribute("userInfo", userInfoDTO);

        return "home-page";
}

here get that model attribute sent via controller
<form:form action="process-homepage" method="GET" modelAttribute="userInfo">
<label for="yourName">Your name:</label>
<form:input id="yourName" path="userName"/>

The path is basically name in form, the name in path should match with variable in DTO class.

Now, we'll get the default values stored in DTO class in our site.

// With the help of @ModelAttribute we create Model object and UserInfoDto object in one line and passing it with (@ModelAttribute("userInfo");
We don't need to create model and userInfoDto Object seperately with @ModelAttribute

-- One line code without creating model object and userinfo dto object and removing model.addAttribute

//If there's any value present inside the userInfoDTO properties then automatically binded with that userInfoDTO object and sending that object to the home-page view with reference called "userInfo". And in view we can use that reference "userInfo" to get the properties from DTO class: userInfo.userName, userInfo.crushName.

   @RequestMapping("/")
    public String showHomePage(@ModelAttribute("userInfo") UserInfoDTO userInfoDTO) {

        return "home-page";
    }

    @RequestMapping("/process-homepage")
    public String showResultPage(@ModelAttribute("userInfo") UserInfoDTO userInfoDTO) {

        return "result-page";
    }
